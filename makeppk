#!/bin/bash
# Use free on your own risk! 
# The script makes .ppk file for putty to login to remote linux computer
# Required: OpenSSH and putty-tools have to be installed. 
# To install:  
# $ sudo apt-get install openssh-server
# $ sudo apt-get install putty-tools
#
#
# Checking if user name is given and setting a group
new_student=$1
user_grp=$2
home_dir="/home/"$new_student  #home dir will be assigned if there is none

if [ -z $new_student ]; then printf "Usage: $0 [x12345678] [group] \nx12345678 - user login \ngroup - user group\nExit...\n"; exit 9; fi
if [ -z $user_grp ]
    then
	answer="initializing variable"    # to accept [Enter] as an answer

	while ! [[ $answer =~ ^(''|y|yes|Y|Yes|n|N|no|No)$ ]] 
	do
	  printf "user name = group name? [Y/n] "
	  read -r answer
	done 

	if [[ $answer = [yY] || $answer == [yY][eE][sS] || $answer = '' ]]; then user_grp=$new_student
	else answer="initializing again" # not to have the old aswer for the new question 
	     while ! [[ $answer =~ ^(''|y|yes|Y|Yes|n|N|no|No)$ ]] 
	     do
  		printf "group = 'student'? [Y/n] "
  		read -r answer
	     done
	     if [[ $answer = [yY] || $answer == [yY][eE][sS] || $answer = '' ]]; then user_grp="student"
	     else read -p "Enter the group: " user_grp
		if [ -z $user_grp ]
		then printf "Error:\nUsage: $0 [x12345678] [group] \nx12345678 - user login \ngroup - user group\nExit...\n"; exit 9; fi
	     fi
        fi
fi

# we have user name and group declared.
#
# if new user exists, the group exists too
# if user is new, then it needs to check the group's existance 
#

if [ !$(id -u $new_student >/dev/null 2>&1) ]; then 
	echo "new user:" $new_student 
	if grep -q $user_grp /etc/group
		then echo $user_grp " group exists"
	else 
		groupadd $user_grp; echo $user_grp "group added"		
	fi
	useradd -g $user_grp -m $new_student
else echo "user " $new_student " exists"
	user_grp=$(id -gn $new_student)
fi

# checking if user has a home directory and if does not have - create
student_dir=$(eval echo ~$new_student)   
if [ ! -d $student_dir ]; then
    $student_dir=$home_dir
    mkdir $student_dir
    chown -R $new_student:$user_grp $student_dir
fi

student_dir=$student_dir"/.ssh"        # setting up a .ssh directory for a user

#
# checking if user has a directory /.ssh in his home dir
# in no, create one and set the ownership of the directory
#
if [ ! -d $student_dir ]; then
	mkdir $student_dir
	chown -R $new_student:$user_grp $student_dir
fi

host_name=$(hostname) 
putty_user=$new_student"@"$host_name           # will make "x00158589@hostname" format username for puttygen

########## GENERATING PPK FILE ###################################################
echo "wait, working..."                        # generates the code - need to wait

puttygen -t rsa -b 2048 -C $putty_user -o $new_student.ppk

if [[ ! -e $new_student.ppk ]]; then echo "Error: file" $new_student".ppk has not been created. Exit..."; exit 9
else echo $new_student".ppk file created"
echo "student_dir="$student_dir
fi

# extract a public key and copy to student_dir/.ssh/authorized_keys
puttygen -L $new_student.ppk >> $student_dir"/authorized_keys"  
chown $new_student:$user_grp $student_dir"/authorized_keys"

# extract private ssh key (file .pem) and put in the student's .ssh directory 
puttygen $new_student.ppk -O private-openssh -o $student_dir"/"$new_student".pem"
chown $new_student:$user_grp $student_dir"/"$new_student".pem"

echo $new_student".ppk file is created in the same directory as the script file "$0
echo "Public OpenSSH file ectracted and added to "$student_dir"/authorized_keys"
echo "as well as "$student_dir"/"$new_student".pem file placed in the same directory."

# to do:
# would be nice to include automatic sending the file to xNNNNNNNN@compute.stu.it-tallaght.ie
# echo "Message Body Here" | mail -s "Subject Here" x00158589@outlook.com -A x00158589.ppk
#
